package parse;

import error.ErrorHelper;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import javaslang.collection.List;
import absyn.*;

parser code {:
  public Parser(Lexer lex) {
     this(lex, lex.getSymbolFactory());
  }

  private Loc loc(Location left, Location right) {
     return Loc.loc(left, right);
  }

  /* override error routines */
  private Loc locOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               Loc.loc((ComplexSymbol) info) :
               info instanceof Symbol ?
                  Loc.loc((Symbol) info) :
                  Loc.loc(cur_token);
  }
  private String lexemeOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               " at '" + ((ComplexSymbol) info).getName() + "'" :
               "";

  }
  public void report_fatal_error(String message, Object info) {
     done_parsing();
     throw ErrorHelper.error(locOfInfo(info), "%s%s%nCan't recover from previous error(s), giving up.", message, lexemeOfInfo(info));
  }
  public void report_error(String message, Object info) {
     throw ErrorHelper.error(locOfInfo(info), "%s%s", message, lexemeOfInfo(info));
  }
:};

terminal String LITINT;
terminal String LITREAL;
terminal String LITBOOL;
terminal String ID;
terminal        PLUS, MINUS, TIMES, DIV, UMINUS;
terminal        AND, OR;
terminal        LPAREN, RPAREN;
terminal        COMMA, SEMICOLON;
terminal        VAR, EQ, COLON;
terminal        LET, IN;
terminal        ASSIGN;
terminal        IF, THEN, ELSE;
terminal        TYPE;
terminal        EQT, NEQ, LT, LE, GT, GE;
terminal        WHILE, DO, BREAK;

non terminal Exp       program;
non terminal Exp       exp;
non terminal List<Exp> exps, expsRest;
non terminal List<Exp> expseq, expseqRest;
non terminal DecVar    decvar;
non terminal DecType   dectype;
non terminal List<DecType> dectypes;
non terminal List<Dec> decs;
non terminal List<Dec> decs_beg_with_variable, decs_beg_with_type;
non terminal Var       var;
non terminal Ty        ty;


precedence left OR;
precedence left AND;
precedence nonassoc EQT, NEQ, LT, LE, GT, GE;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left UMINUS;
precedence nonassoc ELSE;

start with program;

program ::=
  exp:e                        {: RESULT = e; :}
;

exp ::=
  exp:x PLUS exp:y                 {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.PLUS, x, y); :}
| exp:x MINUS exp:y                {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.MINUS, x, y); :}
| exp:x TIMES exp:y                {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.TIMES, x, y); :}
| exp:x DIV exp:y                  {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.DIV, x, y); :}
| exp:x AND exp:y                  {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.AND, x, y); :}
| exp:x OR exp:y                   {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.OR, x, y); :}
| exp:x EQT exp:y                  {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.EQT, x, y); :}
| exp:x NEQ exp:y                  {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.NEQ, x, y); :}
| exp:x LT exp:y                   {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.LT, x, y); :}
| exp:x LE exp:y                   {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.LE, x, y); :}
| exp:x GT exp:y                   {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.GT, x, y); :}
| exp:x GE exp:y                   {: RESULT = new ExpBinOp(loc(xxleft,yxright), ExpBinOp.Op.GE, x, y); :}
| LITINT:x                         {: RESULT = new ExpInt(loc(xxleft,xxright), x); :}
| LITREAL:x                        {: RESULT = new ExpReal(loc(xxleft,xxright), x); :}
| LITBOOL:x                        {: RESULT = new ExpBool(loc(xxleft,xxright), x); :}
| MINUS:m exp:x                    {: RESULT = new ExpNegate(loc(mxleft,xxright), x); :}  %prec UMINUS
| ID:f LPAREN exps:x RPAREN:r      {: RESULT = new ExpCall(loc(fxleft,rxright), f, x); :}
| var:v                            {: RESULT = new ExpVar(loc(vxleft,vxright), v); :}
| var:v ASSIGN exp:e               {: RESULT = new ExpAssign(loc(vxleft,exright), v, e); :}
| LET:l decs:ds IN exp:b           {: RESULT = new ExpLet(loc(lxleft,bxright), ds, b); :}
| LPAREN:l expseq:es RPAREN:r      {: RESULT = new ExpSeq(loc(lxleft,rxright), es); :}
| IF:i exp:t THEN exp:a ELSE exp:b {: RESULT = new ExpIf(loc(ixleft,bxright), t, a, b); :}
| IF:i exp:t THEN exp:a            {: RESULT = new ExpIf(loc(ixleft,axright), t, a, null); :}
| WHILE:w exp:t DO exp:b           {: RESULT = new ExpWhile(loc(wxleft,bxright), t, b); :}
| BREAK:b                          {: RESULT = new ExpBreak(loc(bxleft,bxright)); :}
;

exps ::=
  /* empty */                  {: RESULT = List.empty(); :}
| exp:x expsRest:xs            {: RESULT = xs.prepend(x); :}
;

expsRest ::=
  /* empty */                  {: RESULT = List.empty(); :}
| COMMA exp:x expsRest:xs      {: RESULT = xs.prepend(x); :}
;

expseq ::=
  /* empty */                  {: RESULT = List.empty(); :}
| exp:x expseqRest:xs          {: RESULT = xs.prepend(x); :}
;

expseqRest ::=
  /* empty */                   {: RESULT = List.empty(); :}
| SEMICOLON exp:x expseqRest:xs {: RESULT = xs.prepend(x); :}
;

decvar ::=
  VAR:v ID:x COLON ID:t EQ exp:e {: RESULT = new DecVar(loc(vxleft,exright), x, t, e); :}
| VAR:v ID:x EQ exp:e            {: RESULT = new DecVar(loc(vxleft,exright), x, null, e); :}
;

dectype ::=
  TYPE:t ID:id EQ ty:ty          {: RESULT = new DecType(loc(txleft,tyxright), id,ty); :}
;

dectypes ::=
  dectype:d                      {: RESULT = List.of(d); :}
| dectype:d dectypes:ds          {: RESULT = ds.prepend(d); :}
;

decs ::=
  decs_beg_with_variable:ds    {: RESULT = ds; :}
| decs_beg_with_type:ds        {: RESULT = ds; :}
;

decs_beg_with_variable ::=
  decvar:d                           {: RESULT = List.of(d); :}
| decvar:d decs_beg_with_variable:ds {: RESULT = ds.prepend(d); :}
| decvar:d decs_beg_with_type:ds     {: RESULT = ds.prepend(d); :}
;

decs_beg_with_type ::=
  dectypes:dt                           {: RESULT = List.of(new DecTypeMutual(loc(dtxleft,dtxright), dt)); :}
| dectypes:dt decs_beg_with_variable:ds {: RESULT = ds.prepend(new DecTypeMutual(loc(dtxleft,dtxright), dt)); :}
;

var ::=
  ID:v                         {: RESULT = new VarSimple(loc(vxleft,vxright), v); :}
;

ty ::=
  ID:id                        {: RESULT = new TyName(loc(idxleft,idxright), id); :}
;


